lure_aging %>%
pivot_longer(names_to = "lure",
values_to = "count")
lure_aging %>%
pivot_longer(cols(c(TrtA,TrtB,TrtC)),
names_to = "lure",
values_to = "count")
lure_aging %>%
tidyr::pivot_longer(cols(c(TrtA,TrtB,TrtC)),
names_to = "lure",
values_to = "count")
lure_aging %>%
tidyr::pivot_longer(cols(c(TrtA,TrtB,TrtC)),
names_to = "lure",
values_to = "count")
library(dplyr)
lure_aging %>%
tidyr::pivot_longer(cols(c(TrtA,TrtB,TrtC)),
names_to = "lure",
values_to = "count")
library(tidyverse)
library(readxl)
library(car)
library(Rmisc)
lure_aging <- read_csv("p_auraria_lure_age.csv")
lure_aging %>%
tidyr::pivot_longer(cols = (2:4),
names_to = "lure",
values_to = "count")
tidylure <- lure_aging %>%
tidyr::pivot_longer(cols = (2:4),
names_to = "lure",
values_to = "count")
## summary stats
fctr_stats <- summarySE(tidylure,
measurevar = "count",
groupvars = c("lure","Weeks"))
fctr_stats
anov <- lm(count ~ lure + Weeks,
data = tidylure)
car::Anova(anov, type = "II")
library(FSA)  # for se
tidylure %>%
group_by(lure) %>%
summarise(nObs = sum(!is.na(count)),
mn = mean(count, na.rm = TRUE),
sem = FSA:se(count))
tidylure %>%
group_by(lure) %>%
summarise(nObs = sum(!is.na(count)),
mn = mean(count, na.rm = TRUE),
sem = FSA::se(count))
unique(tidylure$lure)
View(tidylure)
tidylure %>%
group_by(lure) %>%
summarise(nObs = n(),
mn = mean(count, na.rm = TRUE),
sem = FSA::se(count))
tidylure %>%
group_by(lure) %>%
dplyr::summarise(nObs = n(),
mn = mean(count, na.rm = TRUE),
sem = FSA::se(count))
library(multcompView)
library(multcompView)
library(emmeans)
??emmeans
emmeans::emmeans(anov,
~ lures,
adjust = "tukey")
emmeans::emmeans(anov,
~ lure,
adjust = "tukey")
?cld
em <- emmeans::emmeans(anov,
~ lure,
adjust = "tukey")
cld(em,
alpha = 0.05,
Letter = letters)
??multcompView
multcomp::cld(em,
alpha = 0.05,
Letter = letters)
?list.files
list.files()
list.files("C:/Users/Charles.Burks/OneDrive - USDA/_Personnel/_hacu2021/")
candidates <- list.files("C:/Users/Charles.Burks/OneDrive - USDA/_Personnel/_hacu2021/")
candidates <- as.data.frame(candidates)
colnames(candidates) <- "name"
library(tidyverse)
?str_detect
candidates
candidates %>%
filter(str_detect(name,"HACU", negate = TRUE))
candidates
candidates <- candidates %>%
filter(str_detect(name,"HACU", negate = TRUE))
candidates
candidates <- candidates %>%
filter(str_detect(name,"HACU", negate = TRUE)) %>%
filter(str_detect(name,"hacu", negate = TRUE))
candidates
write.csv(candidates,
"C:/Users/Charles.Burks/OneDrive - USDA/_Personnel/_hacu2021/hacu_cand_db.csv",
row.names = FALSE)
library(tidyverse)
library(lubridate)
library(readxl)
dat_in <- read_csv("q2-2023-02-06.csv")
dat_in
dat_in <- clean_names(dat_in)
library(janitor)
dat_in <- clean_names(dat_in)
dat_in
?lubridate
as.Date(dmy_hm(dat_in$date_time_pst))
dat_in$date_time_pst <- as.Date(dmy_hm(dat_in$date_time_pst))
dat_in
dat_in <- read_csv("q2-2023-02-06.csv")
dat_in <- clean_names(dat_in)
??as `date-time`
dat_in$date_time_pst <- as.POSIXct(dmy_hm(dat_in$date_time_pst))
dat_in
dat_in %>%
rename(deg_c = ch_1_temperature_c,
rh = ch_2_rh_percent)
dat_in <- dat_in %>%
rename(deg_c = ch_1_temperature_c,
rh = ch_2_rh_percent)
dat_in
# Plot
ggplot2(dat_in, aes(x = date_time_pst, y = deg_c))
# Plot
ggplot(dat_in, aes(x = date_time_pst, y = deg_c))
# Plot
ggplot(dat_in, aes(x = date_time_pst, y = deg_c)) +
geom_line()
dat_in <- read_csv("q2-2023-02-06.csv")
dat_in <- clean_names(dat_in)
dat_in$date_time_pst <- as.POSIXct(mdy_hm(dat_in$date_time_pst))
dat_in <- dat_in %>%
rename(deg_c = ch_1_temperature_c,
rh = ch_2_rh_percent)
dat_in
# Plot
ggplot(dat_in, aes(x = date_time_pst, y = deg_c)) +
geom_line()
theme_csb_fullwidth1 <- function(){
theme(axis.text.x = element_text(color = "black", size = 12),
axis.text.y = element_text(color = "black", size = 12),
axis.title.x = element_text(color = "black", size = 12),
axis.title.y = element_text(color = "black", size = 12),
legend.title = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 10))
)
theme_csb_fullwidth1 <- function(){
theme(axis.text.x = element_text(color = "black", size = 12),
axis.text.y = element_text(color = "black", size = 12),
axis.title.x = element_text(color = "black", size = 12),
axis.title.y = element_text(color = "black", size = 12),
legend.title = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 10)
)
}
# Plot
p1 <- ggplot(dat_in, aes(x = date_time_pst, y = deg_c)) +
geom_line() +
xlab("Date and Time (readings every 10 s") +
ylab("Degree Celcius") +
theme_csb_fullwidth1()
p1
theme_csb_fullwidth1 <- function(){
theme_bw() +
theme(axis.text.x = element_text(color = "black", size = 12),
axis.text.y = element_text(color = "black", size = 12),
axis.title.x = element_text(color = "black", size = 12),
axis.title.y = element_text(color = "black", size = 12),
legend.title = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 10)
)
}
# Plot
p1 <- ggplot(dat_in, aes(x = date_time_pst, y = deg_c)) +
geom_line() +
xlab("Date and Time (readings every 10 s") +
ylab("Degree Celcius") +
theme_csb_fullwidth1()
p1
# Plot
p1 <- ggplot(dat_in, aes(x = date_time_pst, y = deg_c)) +
geom_line() +
xlab("Date and Time (readings every 10 s)") +
ylab("Degree Celcius") +
theme_csb_fullwidth1()
p1
# Plot
p1 <- ggplot(dat_in, aes(x = date_time_pst, y = deg_c)) +
geom_line() +
labs(title = "Temperature logger readings, 10 s intervals",
x = "",
y = "Degree Celcius") +
theme_csb_fullwidth1()
p1
# Plot
p1 <- ggplot(dat_in, aes(x = date_time_pst, y = deg_c)) +
geom_line() +
labs(title = "Temperature logger readings, 10 s intervals",
x = "",
y = "Degree Celcius",
caption = "Queue2 in H123") +
theme_csb_fullwidth1()
p1
ggsave(filename = "hobo_plot_2023_02_06.jpg",
plot = p1, device = "jpg", path = "./results",
dpi = 300, width = 5.83, height = 5.83, units = "in")
ggsave(filename = "hobo_plot_2023_02_06.jpg",
plot = p1, device = "jpg",
dpi = 300, width = 5.83, height = 5.83, units = "in")
View(dat_in)
View(dat_in)
library(readxl)
?read_excel
#old <-
read_excel("h123-q2-2022-02-11-07-18-05-0800.xlsx",
sheet = "DATA",
skip = 1)
old <- read_excel("h123-q2-2022-02-11-07-18-05-0800.xlsx",
sheet = "DATA",
skip = 1)
old <- clean_names(old)
old
old <- old %>%
rename(date_time = date_time_pst,
deg_c = ch_1_temperature_c,
rh = ch_2_rh_percent)
old <- old %>%
rename(date_time = date_gmt_0700,
deg_c = ch_1_temperature_c,
rh = ch_2_rh_percent)
old <- old %>%
rename(date_time = date_time_gmt_0700,
deg_c = ch_1_temperature_c,
rh = ch_2_rh_percent)
old <- old %>%
rename(date_time = date_time_gmt_0700,
deg_c = temp_c,
rh = rh_percent)
old
View(old)
ggplot(old, aes(x = date_time_pst, y = deg_c)) +
geom_line() +
labs(title = "Temperature logger readings, 5 min intervals",
x = "",
y = "Degree Celcius",
caption = "Queue2 in H123") +
theme_csb_fullwidth1()
ggplot(old, aes(x = date_time, y = deg_c)) +
geom_line() +
labs(title = "Temperature logger readings, 5 min intervals",
x = "",
y = "Degree Celcius",
caption = "Queue2 in H123") +
theme_csb_fullwidth1()
# Select 3 days
old %>%
filter(date_time > as.POSIXct("2022-09-31 00:01"))
?as.POSIXct
# Select 3 days
old %>%
filter(date_time > as.POSIXct("2022-09-31 00:01 UTC"))
?myd_hm
??myd_hm
?mdy_hm
# Select 3 days
old %>%
filter(date_time > as.POSIXct(ymd_hm("2022-09-31 00:01")))
# Select 3 days
old %>%
filter(date_time > as.POSIXct(ymd_hm("2022-09-31 00:01 UTC")))
old
# Select 3 days
old %>%
filter(date_time > as.POSIXct(ymd_hms("2022-09-31 00:01")))
# Select 3 days
old %>%
filter(date_time > as.POSIXct(ymd_hms("2022-09-31 00:00:01")))
?month
# Select 3 days
old %>%
filter(month(date_time) > 9)
# Select 3 days
old %>%
filter(month(date_time) > 9 & month(date_time) < 11)
# Select 3 days
old <- old %>%
filter(month(date_time) > 9 & month(date_time) < 11)
old %>%
filter(mday(date_time < 4))
?mday
old %>%
filter(mday(date_time) < 4)
old <- old %>%
filter(mday(date_time) < 4)
ggplot(old, aes(x = date_time, y = deg_c)) +
geom_line() +
labs(title = "Temperature logger readings, 5 min intervals",
x = "",
y = "Degree Celcius",
caption = "Queue2 in H123") +
theme_csb_fullwidth1()
ggplot(old, aes(x = date_time, y = deg_c)) +
geom_line() +
labs(title = "Temperature logger readings, 5 min intervals",
x = "",
y = "Degree Celcius",
caption = "Queue2 in H123") +
ylim(12.5,34)
ggplot(old, aes(x = date_time, y = deg_c)) +
geom_line() +
labs(title = "Temperature logger readings, 5 min intervals",
x = "",
y = "Degree Celcius",
caption = "Queue2 in H123") +
ylim(12.5,34) +
theme_csb_fullwidth1()
p2 <- ggplot(old, aes(x = date_time, y = deg_c)) +
geom_line() +
labs(title = "Temperature logger readings, 5 min intervals",
x = "",
y = "Degree Celcius",
caption = "Queue2 in H123") +
ylim(12.5,34) +
theme_csb_fullwidth1()
p2
ggsave(filename = "hobo_plot_2022_10_03.jpg",
plot = p2, device = "jpg",
dpi = 300, width = 5.83, height = 5.83, units = "in")
library(tidyverse)
library(lubridate)
library(readxl)
library(janitor)
library(readxl)
theme_csb_fullwidth1 <- function(){
theme_bw() +
theme(axis.text.x = element_text(color = "black", size = 12),
axis.text.y = element_text(color = "black", size = 12),
axis.title.x = element_text(color = "black", size = 12),
axis.title.y = element_text(color = "black", size = 12),
legend.title = element_text(color = "black", size = 12),
legend.text = element_text(color = "black", size = 10)
)
}
dat_in <- read_csv("Queue 2 2023-02-08 08_24_03 PST (Data PST).csv")
dat_in <- clean_names(dat_in)
dat_in$date_time_pst <- as.POSIXct(mdy_hm(dat_in$date_time_pst))
dat_in <- dat_in %>%
rename(deg_c = ch_1_temperature_c,
rh = ch_2_rh_percent)
dat_in
# Plot
p1 <- ggplot(dat_in, aes(x = date_time_pst, y = deg_c)) +
geom_line() +
labs(title = "Temperature logger readings, 10 s intervals",
x = "",
y = "Degree Celcius",
caption = "Queue2 in H123") +
theme_csb_fullwidth1()
p1
rm(dat_in)
rm(p1)
#   Load data frame to Global Environment and clean
dat_in <- read_csv("Queue 2 2023-02-08 08_24_03 PST (Data PST).csv")
dat_in <- clean_names(dat_in)
dat_in$date_time_pst <- as.POSIXct(mdy_hm(dat_in$date_time_pst))
dat_in <- dat_in %>%
rename(deg_c = ch_1_temperature_c,
rh = ch_2_rh_percent)
dat_in
tail(dat_in)
dat_in %>%
select(1:5)
dat_in %>%
select(1:4) %>% # dropped 2 qc cols w mostly NA and a dewpoint col
pivot_longer(cols = 3:4, names_to = "response_var", values_to = "response")
dat_in <- dat_in %>%
select(1:4) %>% # dropped 2 qc cols w mostly NA and a dewpoint col
pivot_longer(cols = 3:4, names_to = "response_var", values_to = "response")
# Plot
p3 <- ggplot(dat_in, aes(x = date_time_pst, y = response)) +
geom_line() +
labs(title = "Temperature logger readings, 10 s intervals",
x = "",
y = " ",
caption = "Queue2 in H123") +
facet_grid()
# Plot
p3 <- ggplot(dat_in, aes(x = date_time_pst, y = response)) +
geom_line() +
labs(title = "Temperature logger readings, 10 s intervals",
x = "",
y = " ",
caption = "Queue2 in H123") +
facet_grid() +
theme_csb_fullwidth1()
p3
dat_in
# Plot
p3 <- ggplot(dat_in, aes(x = date_time_pst, y = response)) +
geom_line() +
labs(title = "Temperature logger readings, 10 s intervals",
x = "",
y = " ",
caption = "Queue2 in H123") +
facet_grid(response_var ~ .) +
theme_csb_fullwidth1()
p3
# Plot
p3 <- ggplot(dat_in, aes(x = date_time_pst, y = response)) +
geom_line() +
labs(title = "Temperature logger readings, 10 s intervals",
x = "",
y = " ",
caption = "Queue2 in H123") +
facet_grid(response_var ~ ., scales = "free_y") +
theme_csb_fullwidth1()
p3
ggsave(filename = "hobo_plot_2023_02_08.jpg",
plot = p3, device = "jpg",
dpi = 300, width = 5.83, height = 5.83, units = "in")
iris
Iris
library(Desc)
desc(Sepal.Length ~ Species, data = Iris)
library(Desc)
library(DescTools)
desc(Sepal.Length ~ Species, data = Iris)
?Desc
Desc(Sepal.Length ~ Species, data = Iris)
Iris <- iris
Desc(Sepal.Length ~ Species, data = Iris)
Iris
Iris %>%
group_by(Species) %>%
summarise(nObs = n(),
mn = mean(Sepal.Length),
sem = FSA::se(Sepal.Length))
library(FSA)
library(magrittr)
Iris %>%
group_by(Species) %>%
summarise(nObs = n(),
mn = mean(Sepal.Length),
sem = FSA::se(Sepal.Length))
Iris %>%
group_by(Species) %>%
dplyr::summarise(nObs = n(),
mn = mean(Sepal.Length),
sem = FSA::se(Sepal.Length))
Iris %>%
dplyr::group_by(Species) %>%
dplyr::summarise(nObs = n(),
mn = mean(Sepal.Length),
sem = FSA::se(Sepal.Length))
library(tidyverse)
Iris %>%
group_by(Species) %>%
summarise(nObs = n(),
mn = mean(Sepal.Length),
sem = FSA::se(Sepal.Length))
sepal_means <- Iris %>%
group_by(Species) %>%
summarise(nObs = n(),
mn = mean(Sepal.Length),
sem = FSA::se(Sepal.Length))
sepal_means
ggplot(sepal_means, aes(x = Species, y = mn)) +
geom_col()
ggplot(sepal_means, aes(x = Species, y = mn)) +
geom_col() +
geom_errorbar(ymin = mn - sem, ymax = mn + sem)
ggplot(sepal_means, aes(x = Species, y = mn)) +
geom_col() +
geom_errorbar(aes(ymin = mn - sem, ymax = mn + sem))
ggplot(sepal_means, aes(x = Species, y = mn)) +
geom_col() +
geom_errorbar(aes(ymin = mn - sem,
ymax = mn + sem),
size = 0.5)
ggplot(sepal_means, aes(x = Species, y = mn)) +
geom_col() +
geom_errorbar(aes(ymin = mn - sem,
ymax = mn + sem),
width = 0.5)
Iris
head(Iris)
sepal_means
p1 <- ggplot(sepal_means, aes(x = Species, y = mn)) +
geom_col() +
geom_errorbar(aes(ymin = mn - sem,
ymax = mn + sem),
width = 0.5)
p1
p1 <- ggplot(sepal_means, aes(x = Species, y = mn)) +
geom_col() +
geom_errorbar(aes(ymin = mn - sem,
ymax = mn + sem),
width = 0.5)
p1
ggsave(filename = "iris-sepal-means-default.jpg", plot = p1, device = "jpg",
dpi = 300, width = 2.83, height = 2.1225, units = "in")
